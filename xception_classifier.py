# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zxT_DBeVJbEwfXFOj3xQUXJBOHmicXd3
"""

from keras.layers import Input, Lambda, Dense, Flatten, Dropout
from keras.models import Model, load_model
import warnings
warnings.filterwarnings("ignore")

from keras.applications.xception import Xception
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
from keras.regularizers import l2

#Input image size for xcpetion model
IMAGE_SIZE=[299,299]

#importing dataset from drive to colab
train_path='/content/drive/My Drive/Colab Notebooks/Dataset/train'
valid_path='/content/drive/My Drive/Colab Notebooks/Dataset/test'

#removing last layer of model, to add our own layers to for our classifier
xception=Xception(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)  #

for layer in xception.layers:
    layer.trainable=False
    
#accessing images from dataset
folders=glob('/content/drive/My Drive/Colab Notebooks/Dataset/train/*')

#adding layers
x=Flatten()(xception.output)  
x=Dense(64,kernel_regularizer=l2(0.001),bias_regularizer=l2(0.001),activation='relu')(x)
x=Dropout(0.5)(x)
x=Dense(32,kernel_regularizer=l2(0.001),activation='relu')(x)
x=Dropout(0.25)(x)


prediction=Dense(len(folders),activation='softmax')(x)
model=Model(inputs=xception.input, outputs=prediction)
model.summary()

#compiling our model
model.compile(loss='categorical_crossentropy',optimizer='rmsprop',metrics=['accuracy'])

#data augmentation
from keras.preprocessing.image import ImageDataGenerator
train_datagen=ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2,horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)

#perform validation, and adding other hyperparameters: batch size, class mode, epochs etc
training_set=train_datagen.flow_from_directory('/content/drive/My Drive/Colab Notebooks/Dataset/train',target_size=(299,299),
                                               batch_size=60,class_mode='categorical')
test_set=test_datagen.flow_from_directory('/content/drive/My Drive/Colab Notebooks/Dataset/test',target_size=(299,299),
                                          batch_size=60,class_mode='categorical')
r=model.fit_generator(training_set,validation_data=test_set,epochs=30,
                      steps_per_epoch=len(training_set),validation_steps=len(test_set))

#saving our model
model.save('/content/drive/My Drive/Colab Notebooks/Xception_model.h5')

#plotting loss and accuracy graph
plt.plot(r.history['loss'],label='train loss')
plt.plot(r.history['val_loss'],label='val loss')
plt.legend()
plt.show()
#plt.savefig('/content/drive/My Drive/Colab Notebooks/LossVal_loss.jpg')
plt.plot(r.history['accuracy'],label='train acc')
plt.plot(r.history['val_accuracy'],label='val acc')
plt.legend()
plt.show()
#plt.savefig('/content/drive/My Drive/Colab Notebooks/AccVal_loss.jpg')

#prediction
import cv2
from PIL import Image
def convert_to_array(img):
    im = cv2.imread(img)
    img = Image.fromarray(im, 'RGB')
    image = img.resize((224, 224))
    return np.array(image)
    #cv2.imshow() 
def get_animal_name(label):
    if label==0:
        return "cat"
    if label==1:
        return "cow"
    if label==2:
        return "dog"
    if label==3:
        return "goat"
    if label==4:
        return "horse"
    if label==5:
        return "monkey"
    
def predict_animal(file):
    print("Predicting .................................")
    ar=convert_to_array(file)
    ar=ar/255
    label=1
    a=[]
    a.append(ar)
    a=np.array(a)
    score=model.predict(a,verbose=1)
    print(score)
    label_index=np.argmax(score)
    print(label_index)
    acc=np.max(score)
    animal=get_animal_name(label_index)
    print(animal)
    print("The predicted Animal is a "+animal+" with accuracy =    "+str(acc))

#importing test image from dataset, can be performed for all classes of animals.
img=image.load_img('/content/drive/My Drive/Colab Notebooks/Dataset/test/monkey/monkey- (4238).jpg',target_size=(299,299))
predict_animal("/content/drive/My Drive/Colab Notebooks/Dataset/test/monkey/monkey- (4238).jpg")

#displaying image along with predicted class of animal
plt.figure()
imgplot=plt.imshow(img)

